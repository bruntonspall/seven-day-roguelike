== First morning train journey

I have 55 minutes, and no easy internet access.

I've got 2 possible things to do on this journey

  * Random map generation
  * Player movement

I really want to play with Map generation algorithms, but I think player movement is a better idea right now.  It will at least give me something to run around, and feel a bit more interactive.

So I'll need to develop two main parts of the system.
  * A decent rendering compositor
  * An input system

The rendering compositor is going to work out what to render at any given point on the map.
Thanks to last nights work, I've already built a vague interface that is based on rendering sequences of sequences of glyphs.
This gives me a list of rows, with each row being a list of cells, and each cell being a renderable glyph.
For rendering this will do fine, but we'll need to render things by choosing an order.
I think we'll keep a list of creatures and a list of objects.  Each creature and object will have a location and a renderable glyph, so we'll walk through the rows and cells, and render the first of a creature, an object, a map tile.
The most difficult part of this is that because I've got rows and cells, and they are in order I'm not keeping the x and y coordinates.  I think that will have to change.

Secondly I'll need to build an input system.  I'd like to go for a slightly different input system, because there's an idea for the space theme that's sitting in the back of my head.  I want to allow the user to select an action like Move, or Shoot, then select the target location.  Once done, the game will advance a step, perform AI movements, and go back to where we were.

Why add this complexity?  We'll see if it's worth it later down the week.

Now let's start coding

== 15 minutes later

I've got an @ on the map, that's good.

Now that input system.  This could be a bit tricky.

I could cheat for now, and just allow an action like /action/moveup or something similar that executes moving the @ symbol up.
Alternately, I could add several calls, /action/setmovetarget?character=1&x=3&y=3, then an /action/executemoves.  The problem with that is that the latency is going to be an issue if we have to wait for the target to be set.
The other alternative is to make the setting of the targets to be done in javascript in the browser, then when you hit execute, send the details of the moves in a single action.
The javascript option feels like the right step, but it means my app wouldn't be playable from cURL, which I liked the idea of.  I'm not sure how much I like that idea though, so I think we'll drop the text-based curl mode, and go with Javascript.

Let's get coding again

== 10 minutes later

We have our first lack of internet problem.  I've not done coffeescript in Scalatra before, or at least not recently, and so I don't have the relevant local libraries.

I'm using my phone as a Wifi Hotpsot, but on a speeding train, with tunnels, it isn't brilliant.

I'll give it another 5 minutes, then I'll remove the coffeescript processors for now, and do it in plain javascript.

== 10 more minutes

That was painful.  CoffeeScript isn't working, and my jquery $.post isn't posting the data to the endpoint.  Frustratiing isn't quite the word.

I'll come back to this
